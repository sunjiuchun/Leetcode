暴力算法是基础；动态规划必须掌握；中心扩散要会写

方法一：暴力匹配

思路：
根据回文子串的定义，枚举所有长度大于等于2的子串，依次判断它们是否是回文；
在具体实现时，可以只针对大于“当前得到的最长回文子串长度”的子串进行“回文验证”；
在记录最长回文子串的时候，可以只记录“当前子串的起始位置”和“子串长度”，不必做截取。这一步我们放在后面的方法中实现。

class Solution:
	#暴力匹配(超时)
	def longestPalindrome(self, s:str)->str:
		size = len(s)
		if size<2:
			return s
	
	
		max_len=1
		res=s[0]
		
		#枚举所有长度大于等于2的子串
		for i in range(size-1):
			for j in range(i+1,size):
				if j-i+1>max_len and self._valid(s,i,j):
					max_len = j-i+1
					res = s[i:j+1]
		return res

	def _valid(self,s,left,right):
		#验证是否为回文子串
		while left < right:
			if s[left]!=s[right]:
				return False
			left += 1
			right-= 1
		return True
		
方法二：中心扩散法

遍历每一个索引，以这个索引为中心，利用“回文串”中心对称的特点，往两边扩散，看最多能扩散多远。

枚举“中心位置”时间复杂度为 O(N)O(N)，从“中心位置”扩散得到“回文子串”的时间复杂度为 O(N)O(N)，因此时间复杂度可以降到 O(N^2)

class Solution:
	def longestPalindrome(self,s:str)->str:
		size = len(s)
		if size <2 :
			return s
		#至少是1
		max_len=1
		res=s[0]
		
		for i in range(size):
			palindrome_odd, odd_len = self.__center_spread(s,size,i,i)






	def __center_spread(self,s,size,left,right):
	"""
	left=right的时候，此时回文中心是一个字符，回文串的长度是奇数
	right = left + 1 的时候，此时回文中心是一个空隙，回文串的长度是偶数
	"""
	
	i=left
	j=right
	
	while i>=0 and j<size and s[i]=s[j]:
		i -=1
		j +=1
	return s[i+1:j],j-i-1


















